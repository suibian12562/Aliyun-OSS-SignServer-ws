on:
  push:
    branches: [ "main","action-test" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        platform:
          - ubuntu-latest
        architecture:
          - x64
          - arm64
          - x86


    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v3

    - name: Check if code is checked out
      run: ls -la /home/runner/work/Aliyun-OSS-SignServer-ws

    - name: Set architecture
      run: echo "ARCHITECTURE=${{ matrix.architecture }}" >> $GITHUB_ENV

    - name: Install dependents
      run: |
        sudo apt-get update 
        sudo apt-get install libcurl4-openssl-dev libssl-dev ninja-build -y
  
    - name: Install vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.sh
        ./vcpkg integrate install

    - name: Cache
      uses: actions/cache@v2
      with:
        # Assuming that vcpkg is installed in `~/vcpkg`
        # Assuming that the build directory is `./build`
        path: |
          ./vcpkg_installed
        key: ${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('./vcpkg.json')}}
        restore-keys: |
          vcpkg-

    - name: Install vcpkg package
      run: |
        vcpkg install

    - name: Save vcpkg Cache
      uses: actions/cache@v2
      with:
        path: ./vcpkg_installed
        key: ${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('./vcpkg.json')}}


    - name: Configure CMake
      run: |
        mkdir build
        cmake -S . -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake -GNinja
      working-directory: ${{github.workspace}}


    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

# name: Multi-platform and Multi-architecture CMake Build

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# env:
#   # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
#   BUILD_TYPE: Release

# jobs:
#   build:
#     strategy:
#       matrix:
#         platform:
#           - ubuntu-latest
#           - windows-latest
#         architecture:
#           - x64

#     runs-on: ${{ matrix.platform }}

#     steps:
#       - uses: actions/checkout@v3

#       - name: Check if code is checked out
#         run: |
#           if [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
#             ls -la ${{ github.workspace }}
#           else
#             dir ${{ github.workspace }}
#           fi

#       - name: Install dependents
#         run: |
#             if ($env:RUNNER_OS -eq "Windows") {
#               choco install ninja
#             }
#             elseif ($env:RUNNER_OS -eq "Linux") {
#               sudo apt-get update
#               sudo apt-get install libcurl4-openssl-dev libssl-dev ninja-build -y
#             }
        
        

#       - name: Install vcpkg
#         run: |
#           git clone https://github.com/Microsoft/vcpkg.git
#           cd vcpkg
#           if [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
#             ./bootstrap-vcpkg.sh
#           else
#             bootstrap-vcpkg.bat
#           fi
#           vcpkg integrate install
    
#       - name: Install vcpkg package
#         run: |
#           vcpkg install

#       - name: Configure CMake
#         run: |
#           mkdir build
#           cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}vcpkg/scripts/buildsystems/vcpkg.cmake -GNinja
#         working-directory: ${{ github.workspace }}

#       - name: Build
#         run: cmake --build build --config ${BUILD_TYPE}
#         working-directory: ${{ github.workspace }}
